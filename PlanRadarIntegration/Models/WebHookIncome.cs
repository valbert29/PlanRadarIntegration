// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using PlanRadarIntegration;
//
//    var webHookIncome = WebHookIncome.FromJson(jsonString);

namespace PlanRadarIntegration.Models
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class WebHookIncome
    {
        [JsonProperty("data")]
        public DataClass Data { get; set; }

        [JsonProperty("event_name")]
        public string EventName { get; set; }
    }

    public partial class DataClass
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("attributes")]
        public Attributes Attributes { get; set; }

        [JsonProperty("relationships")]
        public Relationships Relationships { get; set; }
    }

    public partial class Attributes
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("uuid")]
        public string Uuid { get; set; }

        [JsonProperty("created-at")]
        public DateTimeOffset CreatedAt { get; set; }

        [JsonProperty("updated-at")]
        public DateTimeOffset UpdatedAt { get; set; }

        [JsonProperty("subject")]
        public string Subject { get; set; }

        [JsonProperty("typed-values")]
        public TypedValues TypedValues { get; set; }

        [JsonProperty("author-id")]
        public string AuthorId { get; set; }

        [JsonProperty("updated-by-id")]
        public string UpdatedById { get; set; }

        [JsonProperty("assigned-to-id")]
        public object AssignedToId { get; set; }

        [JsonProperty("priority-id")]
        public object PriorityId { get; set; }

        [JsonProperty("status-id")]
        public string StatusId { get; set; }

        [JsonProperty("component-id")]
        public string ComponentId { get; set; }

        [JsonProperty("ticket-type-id")]
        public string TicketTypeId { get; set; }

        [JsonProperty("customer-id")]
        public string CustomerId { get; set; }

        [JsonProperty("sequential-id")]
        public long SequentialId { get; set; }

        [JsonProperty("due-date")]
        public DateTimeOffset DueDate { get; set; }

        [JsonProperty("extension-date")]
        public object ExtensionDate { get; set; }

        [JsonProperty("due-date-change-count")]
        public long DueDateChangeCount { get; set; }

        [JsonProperty("parent-id")]
        public object ParentId { get; set; }

        [JsonProperty("plan-x")]
        public string PlanX { get; set; }

        [JsonProperty("plan-y")]
        public string PlanY { get; set; }

        [JsonProperty("progress")]
        public long Progress { get; set; }

        [JsonProperty("ext-uri")]
        public object ExtUri { get; set; }

        [JsonProperty("plan-id")]
        public object PlanId { get; set; }

        [JsonProperty("recurring-reminders")]
        public MetaOptions RecurringReminders { get; set; }

        [JsonProperty("server-updated-at")]
        public DateTimeOffset ServerUpdatedAt { get; set; }

        [JsonProperty("plan-z")]
        public object PlanZ { get; set; }

        [JsonProperty("ifc-entity-uuid")]
        public object IfcEntityUuid { get; set; }

        [JsonProperty("meta-options")]
        public MetaOptions MetaOptions { get; set; }

        [JsonProperty("lat")]
        public object Lat { get; set; }

        [JsonProperty("lon")]
        public object Lon { get; set; }

        [JsonProperty("subscribers")]
        public object Subscribers { get; set; }

        [JsonProperty("project-id")]
        public string ProjectId { get; set; }

        [JsonProperty("screenshots-url")]
        public ScreenshotsUrl ScreenshotsUrl { get; set; }

        [JsonProperty("current-viewpoint")]
        public object CurrentViewpoint { get; set; }

        [JsonProperty("has-children")]
        public bool HasChildren { get; set; }

        [JsonProperty("seen")]
        public bool Seen { get; set; }
    }

    public partial class MetaOptions
    {
    }

    public partial class ScreenshotsUrl
    {
        [JsonProperty("isometric")]
        public object Isometric { get; set; }

        [JsonProperty("top")]
        public object Top { get; set; }
    }

    public partial class TypedValues
    {
        [JsonProperty("tf48a77425210be126")]
        public string Tf48A77425210Be126 { get; set; }

        [JsonProperty("tf4e2d9e6f421b7f40")]
        public string Tf4E2D9E6F421B7F40 { get; set; }
    }

    public partial class Relationships
    {
        [JsonProperty("author")]
        public AssignedTo Author { get; set; }

        [JsonProperty("updated-by")]
        public AssignedTo UpdatedBy { get; set; }

        [JsonProperty("assigned-to")]
        public AssignedTo AssignedTo { get; set; }

        [JsonProperty("priority")]
        public AssignedTo Priority { get; set; }

        [JsonProperty("status")]
        public AssignedTo Status { get; set; }

        [JsonProperty("project")]
        public AssignedTo Project { get; set; }

        [JsonProperty("component")]
        public AssignedTo Component { get; set; }

        [JsonProperty("ticket-type")]
        public AssignedTo TicketType { get; set; }

        [JsonProperty("defectradar-customer")]
        public AssignedTo DefectradarCustomer { get; set; }

        [JsonProperty("parent-ticket")]
        public AssignedTo ParentTicket { get; set; }

        [JsonProperty("journal")]
        public AssignedTo Journal { get; set; }

        [JsonProperty("journal-detail")]
        public AssignedTo JournalDetail { get; set; }

        [JsonProperty("defectradar-issue-image")]
        public AssignedTo DefectradarIssueImage { get; set; }

        [JsonProperty("ticket-videos")]
        public AssignedTo TicketVideos { get; set; }

        [JsonProperty("defectradar-issue-audio")]
        public AssignedTo DefectradarIssueAudio { get; set; }

        [JsonProperty("children-tickets")]
        public AssignedTo ChildrenTickets { get; set; }

        [JsonProperty("documents")]
        public AssignedTo Documents { get; set; }

        [JsonProperty("recurring-reminder")]
        public AssignedTo RecurringReminder { get; set; }
    }

    public partial class AssignedTo
    {
        [JsonProperty("data")]
        public DataUnion Data { get; set; }
    }

    public partial class Dat
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }
    }

    public partial struct DataUnion
    {
        public Dat Dat;
        public List<Dat> DatArray;

        public static implicit operator DataUnion(Dat Dat) => new DataUnion { Dat = Dat };
        public static implicit operator DataUnion(List<Dat> DatArray) => new DataUnion { DatArray = DatArray };
        public bool IsNull => DatArray == null && Dat == null;
    }

    public partial class WebHookIncome
    {
        public static WebHookIncome FromJson(string json) => JsonConvert.DeserializeObject<WebHookIncome>(json, PlanRadarIntegration.Models.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this WebHookIncome self) => JsonConvert.SerializeObject(self, PlanRadarIntegration.Models.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                DataUnionConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class DataUnionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(DataUnion) || t == typeof(DataUnion?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Null:
                    return new DataUnion { };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<Dat>(reader);
                    return new DataUnion { Dat = objectValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<List<Dat>>(reader);
                    return new DataUnion { DatArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type DataUnion");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (DataUnion)untypedValue;
            if (value.IsNull)
            {
                serializer.Serialize(writer, null);
                return;
            }
            if (value.DatArray != null)
            {
                serializer.Serialize(writer, value.DatArray);
                return;
            }
            if (value.Dat != null)
            {
                serializer.Serialize(writer, value.Dat);
                return;
            }
            throw new Exception("Cannot marshal type DataUnion");
        }

        public static readonly DataUnionConverter Singleton = new DataUnionConverter();
    }
}
